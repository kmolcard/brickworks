code:
* blep etc in a module?
* osc post filter (and one pole init, slew rate, etc.) val from input? set state instead?
* audio rate optional pulse width/slope inputs?
* one pole process const input? (return also if const out)
* optimize triangle generation for constant pulse width
* web examples construction/destruction
* web effect mono->stereo and stereo->mono inputs? or display "input needs to be n channels"?
* check const restrict etc.
* define BW_RESTRICT to __restrict or similar when the compiler supports it
* empty functions etc. to keep consistency and forward compatibility?
* float in [-1,1] for velocity, pitch bend, mod wheel
* should clip slope in triangle?
* fix vst3 mapped values (visible in Ableton Live) and short names
* polish examples (ranges, etc.)
* compute bit depth reduction only when input changes? (state, option?)
* common smoothing policy (as control rate as possible?) - smoothing control?
* avoid "force" in coeffs update by using inline functions?
* should rather use backward Euler in bw_onepole?
* treat unused variable/function warnings
* csch for bw_peak bandwidth -> Q, inv sqrt ls2 hs2
* sample rate-constant coeffs? (pan case)
* pan process with no out: should just reset coeffs?
* trace calls (debug)
* svf bandpass out polarity too confusing (inverted in mm2)?
* better common config.h (less stuff maybe, or more stuff - decide)
* separate tests an examples?
* define common midi CCs for examples
* get_y_z1, common strategy?
* sqrt(0) and corner cases, common strategy?
* MEM_REQ_ROUGH() macro?
* use BW_SIZE_T, check constant types
* web examples: need to export memset?
* bw_satur gain compensation to divide by actual gain (derivative) rather than gain parameter?
* cite papers, thank authors
* process1 and multi-channel
* add initial state (x0) to reset state of lp1, ap1, mm1, hs1, ls1, others? all?

build system:
* make makefiles handle paths with spaces etc
* can run su on windows? (system-wide install)
* make autodependencies (.d?) - https://make.mad-scientist.net/papers/advanced-auto-dependency-generation/
* make from... directories
* recursive make?
* make hashdeps (https://github.com/olipratt/hashdeps)?
